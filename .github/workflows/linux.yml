name: Linux
on:
  push:
  pull_request:
    branches:
  schedule:
    - cron: |
        0 0 * * *
concurrency:
  group: ${{ github.head_ref || github.sha }}-${{ github.workflow }}
  cancel-in-progress: true
jobs:
  source:
    name: Source
    runs-on: ubuntu-20.04
    steps:
      - uses: actions/checkout@v2
      - uses: actions/checkout@v2
        with:
          path: cutter
          repository: clear-code/cutter
      - uses: actions/checkout@v2
        with:
          path: mroonga.github.com
          repository: mroonga/mroonga.github.com
      - name: Install dependencies
        run: |
          grep '^deb ' /etc/apt/sources.list | \
            sed -e 's/^deb /deb-src /' | \
            sudo tee /etc/apt/sources.list.d/source.list
          sudo apt update
          sudo apt -y -V install software-properties-common
          sudo add-apt-repository -y ppa:groonga/ppa
          sudo apt update
          sudo apt -y -V install \
            autoconf \
            gettext \
            groonga-normalizer-mysql \
            libgroonga-dev \
            libmysqlclient-dev \
            libtool \
            python3-pip
      - name: Install Sphinx
        run: |
          sudo pip3 install sphinx
      - name: Download MySQL source
        run: |
          mkdir -p ../mysql
          cd ../mysql
          apt source mysql-server
          ln -s $(find . -maxdepth 1 -type d | sort | tail -1) mysql
      - name: Generate configure
        run: |
          ./autogen.sh
      - name: Configure for archive
        run: |
          ./configure \
            --enable-document \
            --with-cutter-source-path=cutter \
            --with-mroonga-github-com-path=mroonga.github.com \
            --with-mysql-source=../mysql/mysql
      - name: Build archive
        run: |
          make dist

      # Artifact
      - uses: actions/upload-artifact@v2
        with:
          name: source
          path: mroonga-*.tar.gz

      # Release
      - name: Upload to release
        uses: softprops/action-gh-release@v1
        if: |
          startsWith(github.ref, 'refs/tags/')
        with:
          files: |
            mroonga-*.tar.gz

  build:
    name: Build
    needs: source
    timeout-minutes: 30
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: debian-bullseye
            package-type: apt
            package: mariadb-10.5
          - os: debian-bullseye
            package-type: apt
            package: mysql-community-8.0
          - os: debian-buster
            package-type: apt
            package: mariadb-10.3
          - os: debian-buster
            package-type: apt
            package: mysql-community-5.7
          - os: debian-buster
            package-type: apt
            package: mysql-community-8.0
          - os: centos-7
            package-type: yum
            package: mariadb-10.2
          - os: almalinux-8
            package-type: yum
            package: mariadb-10.3
          - os: centos-7
            package-type: yum
            package: mariadb-10.3
          - os: almalinux-8
            package-type: yum
            package: mariadb-10.4
          - os: centos-7
            package-type: yum
            package: mariadb-10.4
          - os: almalinux-8
            package-type: yum
            package: mariadb-10.5
          - os: centos-7
            package-type: yum
            package: mariadb-10.5
          - os: almalinux-8
            package-type: yum
            package: mariadb-10.6
          - os: centos-7
            package-type: yum
            package: mariadb-10.6
          - os: ubuntu-impish
            package-type: apt
            package: mysql-8.0
          - os: centos-7
            package-type: yum
            package: mysql-community-5.7
          - os: almalinux-8
            package-type: yum
            package: mysql-community-8.0
          - os: centos-7
            package-type: yum
            package: mysql-community-8.0
          - os: centos-7
            package-type: yum
            package: percona-server-5.7
          - os: almalinux-8
            package-type: yum
            package: percona-server-8.0
          - os: centos-7
            package-type: yum
            package: percona-server-8.0
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: actions/checkout@v2
        with:
          path: groonga
          repository: groonga/groonga
          submodules: recursive
      - uses: ruby/setup-ruby@v1
        with:
          ruby-version: "3.1"
      - uses: actions/download-artifact@v2
        with:
          name: source
      - name: Update version
        if: |
          !startsWith(github.ref, 'refs/tags/') &&
          !startsWith(github.ref, 'refs/heads/maintenance/')
        run: |
          case ${{ matrix.os }} in
            debian-*|ubuntu-*)
              cd packages
              rake version:update
              ;;
          esac
        env:
          GROONGA_REPOSITORY: ../../groonga
      - name: Cache ccache
        uses: actions/cache@v2
        with:
          path: packages/${{ matrix.package }}-mroonga/${{ matrix.package-type }}/build/${{ matrix.package }}-mroonga/ccache
          key: package-${{ matrix.os }}-${{ matrix.package }}-ccache-${{ hashFiles('*.cpp', '*.hpp', '*.h', 'lib/*.cpp', 'lib/*.hpp') }}
          restore-keys: package-${{ matrix.os }}-${{ matrix.package }}-ccache-
      - name: Build with Docker
        run: |
          cd packages/${{ matrix.package }}-mroonga
          exit_status=0
          for i in {1..3}; do
            set +e
            rake ${{ matrix.package-type }}:build BUILD_DIR=build
            exit_status=$?
            set -e
            if [ ${exit_status} -eq 0 ]; then
              break
            fi
          done
          exit ${exit_status}
        env:
          APT_TARGETS: ${{ matrix.os }}
          GROONGA_REPOSITORY: ../../groonga
          YUM_TARGETS: ${{ matrix.os }}

      # Artifact
      - uses: actions/upload-artifact@v2
        with:
          name: packages-${{ matrix.package }}-${{ matrix.os }}
          path: packages/${{ matrix.package }}-mroonga/${{ matrix.package-type }}/repositories/

      # Release
      - name: Create assets
        if: |
          startsWith(github.ref, 'refs/tags/')
        run: |
          mv \
            packages/${{ matrix.package }}-mroonga/${{ matrix.package-type }}/repositories/ \
            repositories
          tar czf \
            ${{ matrix.package }}-mroonga-${{ matrix.os }}.tar.gz \
            repositories
      - name: Ensure creating release
        if: |
          startsWith(github.ref, 'refs/tags/')
        id: create-release
        uses: actions/github-script@0.4.0
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          result-encoding: string
          script: |
            const AsyncFunction = Object.getPrototypeOf(async () => {}).constructor
            const fs = require("fs");
            const path = ".github/workflows/ensure-creating-release.js";
            const script = fs.readFileSync(path).toString();
            const func = new AsyncFunction("require", "github", "context", script);
            return await func(require, github, context);
      - name: Upload to release
        uses: actions/upload-release-asset@v1.0.1
        if: |
          startsWith(github.ref, 'refs/tags/')
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create-release.outputs.result }}
          asset_path: ${{ matrix.package }}-mroonga-${{ matrix.os }}.tar.gz
          asset_name: ${{ matrix.package }}-mroonga-${{ matrix.os }}.tar.gz
          asset_content_type: application/gzip

  test:
    name: Test
    needs: build
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: debian-bullseye
            package-type: apt
            package: mariadb-10.5
          - os: debian-bullseye
            package-type: apt
            package: mysql-community-8.0
          - os: debian-buster
            package-type: apt
            package: mariadb-10.3
          - os: debian-buster
            package-type: apt
            package: mysql-community-5.7
          - os: debian-buster
            package-type: apt
            package: mysql-community-8.0
          - os: centos-7
            package-type: yum
            package: mariadb-10.2
          - os: almalinux-8
            package-type: yum
            package: mariadb-10.3
          - os: centos-7
            package-type: yum
            package: mariadb-10.3
          - os: almalinux-8
            package-type: yum
            package: mariadb-10.4
          - os: centos-7
            package-type: yum
            package: mariadb-10.4
          - os: almalinux-8
            package-type: yum
            package: mariadb-10.5
          - os: centos-7
            package-type: yum
            package: mariadb-10.5
          - os: almalinux-8
            package-type: yum
            package: mariadb-10.6
          - os: centos-7
            package-type: yum
            package: mariadb-10.6
          # TODO: Ubuntu Impish isn't available on bento yet.
          # - os: ubuntu-impish
          #   package-type: apt
          #   package: mysql-8.0
          - os: centos-7
            package-type: yum
            package: mysql-community-5.7
          - os: almalinux-8
            package-type: yum
            package: mysql-community-8.0
          - os: centos-7
            package-type: yum
            package: mysql-community-8.0
          - os: centos-7
            package-type: yum
            package: percona-server-5.7
          - os: almalinux-8
            package-type: yum
            package: percona-server-8.0
          - os: centos-7
            package-type: yum
            package: percona-server-8.0
    runs-on: macos-10.15
    steps:
      - uses: actions/checkout@v2
      - uses: actions/download-artifact@v2
        with:
          name: packages-${{ matrix.package }}-${{ matrix.os }}
      - name: Run VM
        run: |
          vagrant up ${{ matrix.os }}
      - name: Run test
        run: |
          repositories_dir=packages/${{ matrix.package }}-mroonga/${{ matrix.package-type }}/repositories/
          mkdir -p "${repositories_dir}"
          os_type=$(echo "${{ matrix.os }}" | grep -o '^[^-]*')
          cp -a ${os_type} "${repositories_dir}"
          vagrant \
            ssh ${{ matrix.os }} \
            -- \
            /vagrant/packages/${{ matrix.package-type }}/test.sh \
            ${{ matrix.package }}-mroonga
