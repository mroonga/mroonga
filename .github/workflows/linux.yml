name: Linux
on:
  push:
    branches:
      - "*"
    tags:
      - "*"
  pull_request:
    branches:
      - "*"
  schedule:
    - cron: |
        0 0 * * *
jobs:
  build:
    name: Build
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: debian-buster
            package-type: apt
            package: mariadb-10.3
          - os: debian-buster
            package-type: apt
            package: mysql-community-5.7
          - os: debian-buster
            package-type: apt
            package: mysql-community-8.0
          - os: centos-7
            package-type: yum
            package: mariadb-10.2
          - os: centos-7
            package-type: yum
            package: mariadb-10.3
          - os: centos-8
            package-type: yum
            package: mariadb-10.3
          - os: centos-7
            package-type: yum
            package: mariadb-10.4
          - os: centos-8
            package-type: yum
            package: mariadb-10.4
          - os: centos-7
            package-type: yum
            package: mariadb-10.5
          - os: centos-8
            package-type: yum
            package: mariadb-10.5
          - os: centos-7
            package-type: yum
            package: mysql-community-5.7
          - os: centos-7
            package-type: yum
            package: mysql-community-8.0
          - os: centos-8
            package-type: yum
            package: mysql-community-8.0
          - os: centos-7
            package-type: yum
            package: percona-server-5.7
          - os: centos-7
            package-type: yum
            package: percona-server-8.0
          - os: centos-8
            package-type: yum
            package: percona-server-8.0
    runs-on: ubuntu-latest
    steps:
      - name: Remove needless data
        run: |
          sudo rm -rf /opt
      - uses: actions/checkout@v2
      - name: Install dependencies
        run: |
          grep '^deb ' /etc/apt/sources.list | \
            sed -e 's/^deb /deb-src /' | \
            sudo tee /etc/apt/sources.list.d/source.list
          sudo apt update
          sudo apt -y -V install software-properties-common
          sudo add-apt-repository -y ppa:groonga/ppa
          sudo apt update
          sudo apt -y -V install \
            autoconf \
            gettext \
            groonga-normalizer-mysql \
            libgroonga-dev \
            libmysqlclient-dev \
            libtool \
            python3-pip \
            ruby
      - name: Install Sphinx
        run: |
          sudo pip3 install sphinx
      - name: Download MySQL source
        run: |
          mkdir -p ../mysql
          cd ../mysql
          apt source mysql-server
          ln -s $(find . -maxdepth 1 -type d | sort | tail -1) mysql
      - name: Clone dependencies
        run: |
          cd ..
          git clone --depth 1 --recursive https://github.com/groonga/groonga.git
          git clone --depth 1 https://github.com/clear-code/cutter.git
          git clone --depth 1 https://github.com/mroonga/mroonga.github.com.git
      - name: Generate configure
        run: |
          ./autogen.sh
      - name: Configure for archive
        run: |
          ./configure \
            --enable-document \
            --with-cutter-source-path=../cutter \
            --with-mroonga-github-com-path=../mroonga.github.com \
            --with-mysql-source=../mysql/mysql
      - name: Build archive
        run: |
          make dist
      - name: Update version
        if: |
          github.ref == 'refs/heads/master'
        run: |
          case ${{ matrix.os }} in
            debian-*)
              make update-latest-release \
                OLD_RELEASE=$(cat version) \
                OLD_RELEASE_DATE=$(date +%Y-%m-%d) \
                NEW_RELEASE_DATE=$(date +%Y-%m-%d)
              ;;
          esac
        env:
          GROONGA_REPOSITORY: ../../../groonga
      - name: Cache ccache
        uses: actions/cache@v2
        with:
          path: packages/${{ matrix.package }}-mroonga/${{ matrix.package-type }}/build/${{ matrix.package }}-mroonga/ccache
          key: package-${{ matrix.os }}-${{ matrix.package }}-ccache-${{ hashFiles('*.cpp', '*.hpp', '*.h', 'lib/*.cpp', 'lib/*.hpp') }}
          restore-keys: package-${{ matrix.os }}-${{ matrix.package }}-ccache-
      - name: Build with Docker
        run: |
          cd packages/${{ matrix.package }}-mroonga
          rake ${{ matrix.package-type }}:build BUILD_DIR=build
        env:
          APT_TARGETS: ${{ matrix.os }}
          GROONGA_REPOSITORY: ../../../groonga
          YUM_TARGETS: ${{ matrix.os }}

      # Artifact
      - uses: actions/upload-artifact@v2
        with:
          name: packages-${{ matrix.package }}-${{ matrix.os }}
          path: packages/${{ matrix.package }}-mroonga/${{ matrix.package-type }}/repositories/

      # Release
      - name: Create assets
        if: |
          startsWith(github.ref, 'refs/tags/')
        run: |
          mv \
            packages/${{ matrix.package }}-mroonga/${{ matrix.package-type }}/repositories/ \
            repositories
          tar czf \
            ${{ matrix.package }}-mroonga-${{ matrix.os }}.tar.gz \
            repositories
      - name: Ensure creating release
        if: |
          startsWith(github.ref, 'refs/tags/')
        id: create-release
        uses: actions/github-script@0.4.0
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          result-encoding: string
          script: |
            const AsyncFunction = Object.getPrototypeOf(async () => {}).constructor
            const fs = require("fs");
            const path = ".github/workflows/ensure-creating-release.js";
            const script = fs.readFileSync(path).toString();
            const func = new AsyncFunction("require", "github", "context", script);
            return await func(require, github, context);
      - name: Upload to release
        uses: actions/upload-release-asset@v1.0.1
        if: |
          startsWith(github.ref, 'refs/tags/')
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create-release.outputs.result }}
          asset_path: ${{ matrix.package }}-mroonga-${{ matrix.os }}.tar.gz
          asset_name: ${{ matrix.package }}-mroonga-${{ matrix.os }}.tar.gz
          asset_content_type: application/gzip

  test:
    name: Test
    needs: build
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: debian-buster
            package-type: apt
            package: mariadb-10.3
          - os: debian-buster
            package-type: apt
            package: mysql-community-5.7
          - os: debian-buster
            package-type: apt
            package: mysql-community-8.0
          - os: centos-7
            package-type: yum
            package: mariadb-10.2
          - os: centos-7
            package-type: yum
            package: mariadb-10.3
          - os: centos-8
            package-type: yum
            package: mariadb-10.3
          - os: centos-7
            package-type: yum
            package: mariadb-10.4
          - os: centos-8
            package-type: yum
            package: mariadb-10.4
          - os: centos-7
            package-type: yum
            package: mariadb-10.5
          - os: centos-8
            package-type: yum
            package: mariadb-10.5
          - os: centos-7
            package-type: yum
            package: mysql-community-5.7
          - os: centos-7
            package-type: yum
            package: mysql-community-8.0
          - os: centos-8
            package-type: yum
            package: mysql-community-8.0
          - os: centos-7
            package-type: yum
            package: percona-server-5.7
          - os: centos-7
            package-type: yum
            package: percona-server-8.0
          - os: centos-8
            package-type: yum
            package: percona-server-8.0
    runs-on: macos-10.15
    steps:
      - uses: actions/checkout@v2
      - uses: actions/download-artifact@v2
        with:
          name: packages-${{ matrix.package }}-${{ matrix.os }}
      - name: Run VM
        run: |
          vagrant up ${{ matrix.os }}
      - name: Run test
        run: |
          repositories_dir=packages/${{ matrix.package }}-mroonga/${{ matrix.package-type }}/repositories/
          mkdir -p "${repositories_dir}"
          os_type=$(echo "${{ matrix.os }}" | grep -o '^[^-]*')
          cp -a ${os_type} "${repositories_dir}"
          vagrant \
            ssh ${{ matrix.os }} \
            -- \
            /vagrant/packages/${{ matrix.package-type }}/test.sh \
            ${{ matrix.package }}-mroonga
