name: Linux
on:
  push:
    branches:
      - main
      - "maintenance/**"
    tags:
      - "*"
  pull_request:
    paths:
      - "**/*.cpp"
      - "**/*.h"
      - "**/*.hpp"
      - "**/CMakeLists.txt"
      - "**/Makefile.am"
      - ".github/workflows/linux.yml"
      - "configure.ac"
      - "doc/**"
      - "mysql-test/**"
      - "packages/**"
      - "version_*"
  schedule:
    - cron: |
        0 0 * * *
concurrency:
  group: ${{ github.head_ref || github.sha }}-${{ github.workflow }}
  cancel-in-progress: true
jobs:
  source:
    name: Source
    runs-on: ubuntu-latest
    timeout-minutes: 5
    steps:
      - uses: actions/checkout@v4
      - uses: actions/checkout@v4
        with:
          path: cutter
          repository: clear-code/cutter
      - uses: actions/checkout@v4
        with:
          path: mroonga.github.com
          repository: mroonga/mroonga.github.com
      - name: Install dependencies
        run: |
          grep '^deb ' /etc/apt/sources.list | \
            sed -e 's/^deb /deb-src /' | \
            sudo tee /etc/apt/sources.list.d/source.list
          sudo apt update
          sudo apt -y -V install software-properties-common
          sudo add-apt-repository -y ppa:groonga/ppa
          sudo apt update
          sudo apt -y -V install \
            autoconf \
            gettext \
            groonga-normalizer-mysql \
            libgroonga-dev \
            libmysqlclient-dev \
            libtool \
            python3-pip
          sudo pip3 install -U pip
      - name: Install Sphinx
        run: |
          sudo pip3 install -r doc/requirements.txt
      - name: Download MySQL source
        run: |
          mkdir -p ../mysql
          cd ../mysql
          apt source mysql-server
          ln -s $(find . -maxdepth 1 -type d | sort | tail -1) mysql
      - name: Generate configure
        run: |
          ./autogen.sh
      - name: Configure for archive
        run: |
          ./configure \
            --enable-document \
            --with-cutter-source-path=cutter \
            --with-mroonga-github-com-path=mroonga.github.com \
            --with-mysql-source=../mysql/mysql
      - name: Build archive
        run: |
          make dist

      # Artifact
      - uses: actions/upload-artifact@v4
        with:
          name: source
          path: mroonga-*.tar.gz

      # Release
      - name: Upload to release
        if: |
          startsWith(github.ref, 'refs/tags/')
        run: |
          (cd doc/source/news && \
           ruby \
             -e 'print("## Mroonga "); \
                 puts(ARGF.read.split(/^## Release /)[1]. \
                        gsub(/^\(.+\)=$/, "").
                        gsub(/ {.+?}/, ""). \
                        gsub(/{doc}`(.+?)`/) { \
                          id = $1; \
                          title = id.split("\/").last; \
                          path = id.delete_prefix("/"); \
                          url = "https://mroonga.org/docs/#{path}.html"; \
                          "[#{title}](#{url})"; \
                        }. \
                        gsub(/{ref}`(.+?)`/) {$1}.
                        strip)' \
             $(ls *.md | sort --human-numeric-sort | tail -n1)) > \
            release-note.md
          echo "" >> release-note.md
          echo "### Translations" >> release-note.md
          echo "" >> release-note.md
          version=${GITHUB_REF_NAME#v}
          major_version=${version%%.*}
          version_hyphen=$(echo ${version} | tr . -)
          echo " * [Japanese](https://mroonga.org/ja/docs/news/${major_version}.html#release-${version_hyphen})" >> release-note.md
          title="$(head -n1 release-note.md | sed -e 's/^## //')"
          tail -n +2 release-note.md > release-note-without-version.md
          gh release create ${GITHUB_REF_NAME} \
            --discussion-category Releases \
            --notes-file release-note-without-version.md \
            --title "${title}" \
            mroonga-*.tar.gz
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  build:
    name: Build
    needs: source
    timeout-minutes: 30
    strategy:
      fail-fast: false
      matrix:
        include:
          # MariaDB 10.5
          - os: almalinux-8
            package: mariadb-10.5
            test-image: "images:almalinux/8"
          - os: almalinux-9
            package: mariadb-10.5
            test-image: "images:almalinux/9"

          # MariaDB 10.6
          - os: almalinux-8
            package: mariadb-10.6
            test-image: "images:almalinux/8"
          - os: almalinux-9
            package: mariadb-10.6
            test-image: "images:almalinux/9"
          - os: ubuntu-jammy
            package: mariadb-10.6
            test-image: "images:ubuntu/22.04"

          # MariaDB 10.11
          - os: almalinux-8
            package: mariadb-10.11
            test-image: "images:almalinux/8"
          - os: almalinux-9
            package: mariadb-10.11
            test-image: "images:almalinux/9"
          - os: debian-bookworm
            package: mariadb-10.11
            test-image: "images:debian/12"
          - os: ubuntu-noble
            package: mariadb-10.11
            test-image: "images:ubuntu/24.04"

          # MariaDB 11.4
          - os: almalinux-8
            package: mariadb-11.4
            test-image: "images:almalinux/8"

          # MySQL 8.0
          - os: ubuntu-focal
            package: mysql-8.0
            test-image: "images:ubuntu/20.04"
          - os: ubuntu-jammy
            package: mysql-8.0
            test-image: "images:ubuntu/22.04"
          - os: ubuntu-noble
            package: mysql-8.0
            test-image: "images:ubuntu/24.04"

          # MySQL community 8.0
          - os: almalinux-8
            package: mysql-community-8.0
            test-image: "images:almalinux/8"
          - os: almalinux-9
            package: mysql-community-8.0
            test-image: "images:almalinux/9"
          - os: debian-bookworm
            package: mysql-community-8.0
            test-image: "images:debian/12"
          - os: ubuntu-focal
            package: mysql-community-8.0
            test-image: "images:ubuntu/20.04"
          - os: ubuntu-jammy
            package: mysql-community-8.0
            test-image: "images:ubuntu/22.04"
          - os: ubuntu-noble
            package: mysql-community-8.0
            test-image: "images:ubuntu/24.04"

          # MySQL community 8.4
          - os: almalinux-8
            package: mysql-community-8.4
            test-image: "images:almalinux/8"
          - os: almalinux-9
            package: mysql-community-8.4
            test-image: "images:almalinux/9"
          - os: debian-bookworm
            package: mysql-community-8.4
            test-image: "images:debian/12"
          - os: ubuntu-jammy
            package: mysql-community-8.4
            test-image: "images:ubuntu/22.04"
          - os: ubuntu-noble
            package: mysql-community-8.4
            test-image: "images:ubuntu/24.04"

          # Source of version 8.0.38 isn't available yet.
          # MySQL community minimal 8.0
          #- os: almalinux-8
          #  package: mysql-community-minimal-8.0
          #  test-image: "images:almalinux/8"

          # Percona Server 8.0
          - os: almalinux-8
            package: percona-server-8.0
            test-image: "images:almalinux/8"
          - os: almalinux-9
            package: percona-server-8.0
            test-image: "images:almalinux/9"
    env:
      APACHE_ARROW_REPOSITORY: ${{ github.workspace }}/apache-arrow
    runs-on: ubuntu-latest
    steps:
      - name: Prepare environment variables
        run: |
          case ${{ matrix.os }} in
            debian-*|ubuntu-*)
              echo "PACKAGE_TYPE=apt" >> ${GITHUB_ENV}
              ;;
            *)
              echo "PACKAGE_TYPE=yum" >> ${GITHUB_ENV}
              ;;
          esac
      - uses: actions/checkout@v4
      - uses: actions/checkout@v4
        with:
          path: groonga
          repository: groonga/groonga
          submodules: recursive
      - uses: actions/checkout@v4
        with:
          path: apache-arrow
          repository: apache/arrow
      - uses: ruby/setup-ruby@v1
        with:
          ruby-version: ruby
      - uses: actions/download-artifact@v4
        with:
          name: source
      - name: Update version
        if: |
          !startsWith(github.ref, 'refs/tags/') &&
          !startsWith(github.ref, 'refs/heads/maintenance/')
        run: |
          case ${{ matrix.os }} in
            debian-*|ubuntu-*)
              cd packages
              rake version:update
              ;;
          esac
        env:
          GROONGA_REPOSITORY: ../../groonga
      - name: Login to GitHub Container registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Cache ccache
        uses: actions/cache@v4
        with:
          path: packages/${{ matrix.package }}-mroonga/${{ env.PACKAGE_TYPE }}/build/${{ matrix.os }}/ccache
          key: package-${{ matrix.os }}-${{ matrix.package }}-ccache-${{ hashFiles('*.cpp', '*.hpp', '*.h', 'lib/*.cpp', 'lib/*.hpp') }}
          restore-keys: package-${{ matrix.os }}-${{ matrix.package }}-ccache-
      - name: Build with Docker
        run: |
          cd packages/${{ matrix.package }}-mroonga
          if [ "${{ github.event_name }}" != "schedule" ]; then
            rake docker:pull || :
          fi
          exit_status=0
          for i in {1..3}; do
            set +e
            rake ${PACKAGE_TYPE}:build BUILD_DIR=build
            exit_status=$?
            set -e
            if [ ${exit_status} -eq 0 ]; then
              break
            fi
          done
          rake docker:push || :
          exit ${exit_status}
        env:
          APT_TARGETS: ${{ matrix.os }}
          GROONGA_REPOSITORY: ../../groonga
          YUM_TARGETS: ${{ matrix.os }}

      # Artifact
      - uses: actions/upload-artifact@v4
        with:
          name: packages-${{ matrix.package }}-${{ matrix.os }}
          path: packages/${{ matrix.package }}-mroonga/${{ env.PACKAGE_TYPE }}/repositories/

      # Release
      - name: Create assets
        if: |
          startsWith(github.ref, 'refs/tags/')
        run: |
          cp -a \
            packages/${{ matrix.package }}-mroonga/${PACKAGE_TYPE}/repositories/ \
            repositories
          tar czf \
            ${{ matrix.package }}-mroonga-${{ matrix.os }}.tar.gz \
            repositories
      - name: Upload to release
        if: |
          startsWith(github.ref, 'refs/tags/')
        run: |
          gh release upload ${GITHUB_REF_NAME} \
            ${{ matrix.package }}-mroonga-${{ matrix.os }}.tar.gz
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Install Incus
        run: |
          # We can use the official Ubuntu APT repository when
          # ubuntu-latest is Ubuntu 24.04.
          sudo curl -fsSL https://pkgs.zabbly.com/key.asc -o /etc/apt/keyrings/zabbly.asc
          cat <<SOURCES | sudo tee /etc/apt/sources.list.d/zabbly-incus-stable.sources
          Enabled: yes
          Types: deb
          URIs: https://pkgs.zabbly.com/incus/stable
          Suites: $(. /etc/os-release && echo ${VERSION_CODENAME})
          Components: main
          Architectures: $(dpkg --print-architecture)
          Signed-By: /etc/apt/keyrings/zabbly.asc
          SOURCES

          sudo apt update
          sudo apt install -y -V incus
      - name: Allow egress network traffic flows for Incus
        # https://linuxcontainers.org/incus/docs/main/howto/network_bridge_firewalld/#prevent-connectivity-issues-with-incus-and-docker
        run: |
          sudo iptables -I DOCKER-USER -i incusbr0 -j ACCEPT
          sudo iptables -I DOCKER-USER -o incusbr0 -m conntrack --ctstate RELATED,ESTABLISHED -j ACCEPT
      - name: Prepare container
        run: |
          set -x
          sudo incus admin init --auto
          sudo incus launch ${{ matrix.test-image }} target
          sudo incus config device add target host disk source=$PWD path=/host
          # Ideally, we would use systemctl is-system-running --wait to ensure all services are fully operational.
          # However, this option doesn't work in AlmaLinux 8 and results in an error.
          # As a workaround, we introduced a 10-second sleep delay to allow network services time to stabilize,
          # preventing DNS resolution errors when attempting to dnf install command.
          # ref: https://discuss.linuxcontainers.org/t/network-issue-with-almalinux-8-9-on-github-actions-using-incus/20046
          sleep 10
      - name: Run test
        run: |
          sudo incus exec target \
            -- \
            /host/packages/${PACKAGE_TYPE}/test.sh \
              ${{ matrix.package }}-mroonga
      - name: Delete container
        run: |
          sudo incus stop target
          sudo incus delete target
