# -*- po -*-
# Japanese translations for Mroonga package.
# Copyright (C) 2009-2023, Mroonga Project
# This file is distributed under the same license as the Mroonga package.
# Automatically generated, 2023.
#
msgid ""
msgstr ""
"Project-Id-Version: Mroonga mrn_version\n"
"Report-Msgid-Bugs-To: \n"
"PO-Revision-Date: 2023-07-27 16:42+0900\n"
"Last-Translator: Automatically generated\n"
"Language-Team: none\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: ja\n"
"Plural-Forms: nplurals=1; plural=0;\n"

msgid "Wrapper mode"
msgstr "ラッパーモード"

msgid "Here we explain how to use wrapper mode of Mroonga"
msgstr "ここでは Mroonga におけるラッパーモードの利用方法を説明します。"

msgid "How to use wrapper mode"
msgstr "ラッパーモードの利用方法"

msgid ""
"In wrapper mode, Mroonga works in wrapping an existing storage engine. To "
"specify the wrapped storage engine, we use SQL comment like ``COMMENT = "
"'engine \"InnoDB\"'`` for now."
msgstr ""
"ラッパーモードでは、既存のストレージエンジンをラップするかたちで Mroonga が動"
"作します。ラップする対象となるストレージエンジンは、現在のところ SQL のコメン"
"トを利用して ``COMMENT = 'engine \"InnoDB\"'`` のように指定するようになってい"
"ます。"

msgid ""
"For now, a primary key is mandatory in wrapper mode. That is not the case "
"with storage mode."
msgstr ""
"現在のところ、ラッパーモードではテーブルに必ずプライマリーキーを設定する必要"
"があります。ストレージモードはこの限りではありません。"

msgid ""
"Wrapper mode supports the followings, that are not supported in storage mode "
"for now."
msgstr ""
"ラッパーモードでは現在ストレージモードでサポートされていない、以下をサポート"
"しています。"

msgid "null value"
msgstr "null値"

msgid ""
"transaction (if storage engine supports. Note that rollback causes mismatch "
"of indexes, it may affects search results, so recreate index of Mroonga in "
"such a case.)"
msgstr ""
"トランザクション (ストレージエンジンがサポートしている場合。ロールバックする"
"とインデックスの不整合が発生します。インデックスを使った検索に影響するので、"
"その場合にはMroongaのインデックスを再作成します。)"

msgid "How to use full text search"
msgstr "全文検索の利用方法"

msgid ""
"After confirming the installation, let's create a table. The important point "
"is to specify Mroonga by ``ENGINE = Mroonga``. ::"
msgstr ""
"インストールが確認できたら、テーブルを1つ作成してみましょう。 ``ENGINE = "
"Mroonga`` とMroongaを指定するところがポイントです。::"

msgid "We put data by INSERT. ::"
msgstr "INSERTでデータを投入してみましょう。 ::"

msgid "Try full text search. ::"
msgstr "全文検索を実行してみます。 ::"

msgid "Yes, full text search works."
msgstr "おぉぉー。検索できましたね。"

msgid "How to get search score"
msgstr "検索スコアの取得方法"

msgid ""
"We often want to display more relevant results first in full text search. We "
"use search score in such case."
msgstr ""
"全文検索を行う際、指定したキーワードにより内容が一致するレコードを上位に表示"
"したいというような場合があります。そうしたケースでは検索スコアを利用します。"

msgid ""
"We can get search score by MySQL's standard way [#score]_, i.e. we use "
"MATCH...AGAINST in one of columns in SELECT or ORDER BY."
msgstr ""
"検索スコアはMySQLの標準的な方法 [#score]_ で取得できます。つまり、SELECTの取"
"得するカラム名を指定するところやORDER BYのところにMATCH...AGAINSTを指定しま"
"す。"

msgid "Let's try. ::"
msgstr "それでは実際にやってみましょう。::"

msgid ""
"The result having the search word ``fine`` more, i.e. ``id = 3`` message "
"having the higher search score, is displayed first. And you also get search "
"score by using MATCH AGAINST in SELECT phrase."
msgstr ""
"検索対象の文字列 ``fine`` をより多く含む、すなわち検索スコアの高い ``id = "
"3`` のメッセージが上に来ていることが確認できます。また、SELECT句にMATCH "
"AGAINSTを記述しているため、検索スコアも取得できています。"

msgid "You can use ``AS`` to change the attribute name. ::"
msgstr "属性名を変更したい場合は ``AS`` を使って下さい。 ::"

msgid "How to specify the parser for full text search"
msgstr "全文検索用パーサの変更"

msgid ""
"MySQL has the following syntax to specify the parser [#parser]_ for full "
"text search. ::"
msgstr ""
"MySQLは全文検索用のパーサ [#parser]_ を指定する以下のような構文を持っていま"
"す。::"

msgid ""
"To use this syntax, you need to register all parsers in MySQL beforehand. On "
"the other hand, Groonga can dynamically add a tokenizer, that is a parser in "
"MySQL. So if use this syntax in Mroonga, tokenizers that are added in "
"Groonga dynamically cannot be supported. We think that this limitation "
"decreases the convenience, and we choose our own syntax using COMMENT like "
"the following. ::"
msgstr ""
"しかし、この構文を利用する場合は、あらかじめすべてのパーサをMySQLに登録してお"
"く必要があります。一方、Groongaはトークナイザー（MySQLでいうパーサ）を動的に"
"追加することができます。そのため、Mroongaでもこの構文を採用するとGroonga側に"
"動的に追加されたトークナイザーに対応できなくなります。Groongaに動的に追加され"
"るトークナイザーにはMeCabを用いたトークナイザーもあり、この制限に縛られること"
"は利便性を損なうと判断し、以下のようなコメントを用いた独自の構文を採用するこ"
"とにしました。::"

msgid ""
"``COMMENT`` in ``FULLTEXT INDEX`` is only supported MySQL 5.5 or later. If "
"you use MySQL 5.1, use ``mroonga_default_parser`` variable described below."
msgstr ""
"``FULLTEXT INDEX`` に ``COMMENT`` を指定できるのはMySQL 5.5からになります。"
"MySQL 5.1を利用している場合は後述の ``mroonga_default_parser`` 変数を利用して"
"ください。"

msgid "You can specify one of following values as the tokenizer."
msgstr "トークナイザーに指定できるのは以下の値です。"

msgid ""
"You can specify the default tokenizer by passing ``--with-default-"
"tokenizer`` option in ``configure`` when you build Mroonga. ::"
msgstr ""
"デフォルトのパーサは ``configure`` の ``--with-default-tokenizer`` オプション"
"でビルド時に指定することができます。::"

msgid ""
"Or you can set ``mroonga_default_tokenizer`` variable in my.cnf or by SQL. "
"If you specify it in my.cnf, the change will not be lost after restarting "
"MySQL, but you need to restart MySQL to make it effective. On the other "
"hand, if you set it in SQL, the change is effective immediately, but it will "
"be lost when you restart MySQL."
msgstr ""
"また、my.cnfまたはSQL内で ``mroonga_default_tokenizer`` 変数を指定することで"
"も指定できます。my.cnfで指定するとMySQLを再起動しても値は変更されたままです"
"が、反映させるために再起動しなければいけません。一方、SQLで指定した場合はすぐ"
"に設定が反映されますが、MySQLが再起動すると設定は失われます。"

msgid "my.cnf::"
msgstr ""

msgid "SQL::"
msgstr ""

msgid "How to specify the normalizer"
msgstr "ノーマライザーの指定方法"

msgid ""
"Mroonga uses normalizer corresponding to the encoding of document. It is "
"used when tokenizing text and storing table key."
msgstr ""
"Mroongaは、文書のエンコーディング(照合順序)に応じたノーマライザーを使用しま"
"す。これはテキストをトークナイズするときとテーブルのキーを保存するときに使わ"
"れます。"

msgid ""
"It is used ``NormalizerMySQLGeneralCI`` normalizer when the encoding is "
"``utf8_general_ci`` or ``utf8mb4_general_ci``."
msgstr ""
"``utf8_general_ci`` または ``utf8mb4_general_ci`` の場合、"
"``NormalizerMySQLGeneralCI`` ノーマライザーが使用されます。"

msgid ""
"It is used ``NormalizerMySQLUnicodeCI`` normalizer when the encoding is "
"``utf8_unicode_ci`` or ``utf8mb4_unicode_ci``."
msgstr ""
"``utf8_unicode_ci`` または ``utf8mb4_unicode_ci`` の場合、"
"``NormalizerMySQLUnicodeCI`` ノーマライザーが使用されます。"

msgid "It isn't used normalizer when the encoding is ``utf8_bin``."
msgstr "``utf8_bin`` の場合、ノーマライザーは使用されません。"

msgid ""
"Here is an example that uses ``NormalizerMySQLUnicodeCI`` normalizer by "
"specifying ``utf8_unicode_ci``.::"
msgstr ""
"以下は、 ``utf8_unicode_ci`` の照合順序を指定して "
"``NormalizerMySQLUnicodeCI`` ノーマライザーを使用する例です。::"

msgid "Mroonga has the following syntax to specify Groonga's normalizer::"
msgstr ""
"Mroongaは、Groongaのノーマライザーを指定する以下のような構文を持っていま"
"す。::"

msgid ""
"See `Groonga's documentation about normalizer <http://groonga.org/docs/"
"reference/normalizers.html>`_ for more details."
msgstr ""
"詳細は `Groongaのノーマライザーのドキュメント <http://groonga.org/ja/docs/"
"reference/normalizers.html>`_ を確認してください。"

msgid "Here is an example that uses ``NormalizerAuto`` normalizer::"
msgstr "以下は、``NormalizerAuto`` のノーマライザーを使用する例です。::"

msgid "How to get snippet (Keyword in context)"
msgstr "スニペット（キーワード周辺のテキスト）の取得方法"

msgid ""
"Mroonga provides functionality to get keyword in context. It is implemented "
"as :doc:`/reference/udf/mroonga_snippet` UDF."
msgstr ""
"Mroongaは周辺テキスト付きでキーワードを取得する機能を提供しています。この機能"
"は :doc:`/reference/udf/mroonga_snippet` UDFとして実装されています。"

msgid "Logging"
msgstr "ログ出力"

msgid "Mroonga outputs the logs by default."
msgstr "Mroongaではデフォルトでログの出力を行うようになっています。"

msgid ""
"Log files are located in MySQL's data directory with the filename  ``groonga."
"log``."
msgstr ""
"ログファイルはMySQLのデータディレクトリ直下に ``groonga.log`` というファイル"
"名で出力されます。"

msgid "Here is the example of the log. ::"
msgstr "以下はログの出力例です。 ::"

msgid ""
"The default log level is NOTICE, i.e. we have important information only and "
"we don't have debug information etc.)."
msgstr ""
"ログのデフォルトの出力レベルはNOTICE（必要な情報のみ出力。デバッグ情報などは"
"出力しない）となっております。"

msgid ""
"You can get the log level by ``mroonga_log_level`` system variable, that is "
"a global variable. You can also modify it dynamically by using SET phrase. ::"
msgstr ""
"ログの出力レベルは ``mroonga_log_level`` というシステム変数で確認することがで"
"きます（グローバル変数）。またSET文で動的に出力レベルを変更することもできま"
"す。 ::"

msgid "Available log levels are the followings."
msgstr "設定可能なログレベルは以下の通りです。"

msgid "NONE"
msgstr ""

msgid "EMERG"
msgstr ""

msgid "ALERT"
msgstr ""

msgid "CRIT"
msgstr ""

msgid "ERROR"
msgstr ""

msgid "WARNING"
msgstr ""

msgid "NOTICE"
msgstr ""

msgid "INFO"
msgstr ""

msgid "DEBUG"
msgstr ""

msgid "DUMP"
msgstr ""

msgid "See :ref:`server-variable-mroonga-log-level` about details."
msgstr "詳細は :ref:`server-variable-mroonga-log-level` を参照してください。"

msgid ""
"You can reopen the log file by FLUSH LOGS. If you want to rotate the log "
"file without stopping MySQL server, you can do in the following procedure."
msgstr ""
"またFLUSH LOGSでログの再オープンを行うことができます。MySQLサーバを停止せずに"
"ログのローテートを行いたいような場合には、以下の手順で実行すると良いでしょ"
"う。"

msgid ""
"change the file name of ``groonga.log`` (by using OS's mv command etc.)."
msgstr "``groonga.log`` ファイルの名前を変更（OSコマンドのmvなどで）"

msgid ""
"invoke \"FLUSH LOGS\" in MySQL server (by mysql command or mysqladmin "
"command)."
msgstr ""
"MySQLサーバに対して\"FLUSH LOGS\"を実行（mysqlコマンドあるいはmysqladminコマ"
"ンドにて）"

msgid "Next step"
msgstr "次のステップ"

msgid ""
"Now, you can use Mroonga as wrapper mode! If you want Mroonga to be faster, "
"see also :doc:`/reference/optimizations`."
msgstr ""
"これでラッパーモードでMroongaを使えるようになりました！Mroongaをもっと速くし"
"たい場合は :doc:`/reference/optimizations` も参照してください。"

msgid "Footnotes"
msgstr "脚注"

msgid ""
"`MySQL 5.1 Reference Manual :: 11 Functions and Operations :: 11.7 Full-Text "
"Search Functions <http://dev.mysql.com/doc/refman/5.1/ja/fulltext-search."
"html>`_"
msgstr ""
"`MySQL 5.1 リファレンスマニュアル :: 11 関数と演算子 :: 11.7 全文検索関数 "
"<http://dev.mysql.com/doc/refman/5.1/ja/fulltext-search.html>`_"

msgid "In Groonga, we call it a 'tokenizer'."
msgstr "Groongaではトークナイザーと呼んでいる。"

msgid "Available tokenizers"
msgstr "利用可能なトークナイザー一覧"

msgid "Tokenizer"
msgstr "トークナイザー"

msgid "Description"
msgstr "説明"

msgid "``off``"
msgstr ""

msgid ""
"(``Deprecated``) It does not tokenize at all. Use ``off`` if you want to "
"treat ``content`` as is. For example, this value is used for prefix search."
msgstr ""
"(``非推奨``) トークナイズしません。 ``off`` は ``content`` をそのまま扱いたい"
"場合に使います。例えば、この値は前方一致検索のために指定します。"

msgid "``none``"
msgstr ""

msgid ""
"It does not tokenize at all. Use ``none`` if you want to treat ``content`` "
"as is. For example, this value is used for prefix search."
msgstr ""
"トークナイズしません。\"off\"は ``content`` をそのまま扱いたい場合に使いま"
"す。例えば、この値は前方一致検索のために指定します。"

msgid "``TokenBigram``"
msgstr ""

msgid ""
"It tokenises in bigram. But continuous alphabets, numbers or symbols are "
"treated as a token. So there can exist tokes with 3 letters or more. It is "
"to reduce noises."
msgstr ""
"バイグラムでトークナイズする。ただし、連続したアルファベット・連続した数字・"
"連続した記号はそれぞれ1つのトークンとして扱う。そのため、3文字以上のトークン"
"も存在する。これはノイズを減らすためである。"

msgid "This is the default value."
msgstr "デフォルト値。"

msgid "``TokenMecab``"
msgstr ""

msgid "It tokenises using MeCab. Groonga should be built with MeCab support."
msgstr ""
"MeCabを用いてトークナイズする。groongaがMeCabサポート付きでビルドされている必"
"要がある。"

msgid "``TokenBigramSplitSymbol``"
msgstr ""

msgid ""
"It tokenises in bigram. Unlike ``TokenBigram``, continuous symbols are not "
"treated as a token, but tokenised in bigram."
msgstr ""
"バイグラムでトークナイズする。 ``TokenBigram`` と異なり、記号が連続していても"
"特別扱いして1つのトークンとして扱わず通常のバイグラムの処理を行う。"

msgid ""
"When you use ``TokenBigramSplitSymbol`` instead of ``TokenBigram``, ``\"!?"
"\"`` can match ``\"!?!?!?\"`` in ``\"Is it really!?!?!?\"``. But when you "
"use ``TokenBigram``, only ``\"!?!?!?\"`` can match as well."
msgstr ""
"TokenBigramではなく ``TokenBigramSplitSymbol`` を利用すると「 ``Is it "
"really!?!?!?`` 」の「 ``!?!?!?`` 」の部分に「 ``!?`` 」でマッチする。 "
"``TokenBigram`` の場合は「 ``!?!?!?`` 」でないとマッチしない。"

msgid "``TokenBigramSplitSymbolAlpha``"
msgstr ""

msgid ""
"It tokenise in bigram. In addition to ``TokenBigramSplitSymbol``, continuous "
"alphabets are not treated as a token either, but tokenised in bigram."
msgstr ""
"バイグラムでトークナイズする。 ``TokenBigramSplitSymbol`` に加えて、連続した"
"アルファベットも特別扱いせずに通常のバイグラムの処理を行う。"

msgid ""
"When you use ``TokenBigramSplitSymbolAlpha`` instead of ``TokenBigram``, ``"
"\"real\"`` can match ``\"Is it really?\"``. But when you use "
"``TokenBigram``, only ``\"really\"`` can match as well."
msgstr ""
"``TokenBigram`` ではなく ``TokenBigramSplitSymbolAlpha`` を利用すると「 ``Is "
"it really?`` 」に「 ``real`` 」でマッチする。 ``TokenBigram`` の場合は"
"「 ``really`` 」でないとマッチしない。"

msgid "``TokenBigramSplitSymbolAlphaDigit``"
msgstr ""

msgid ""
"It tokenise in bigram. In addition to ``TokenBigramSplitSymbolAlpha``, "
"continuous numbers are not treated as a token either, but tokenised in "
"bigram. So any kind of characters are treated equally in bigram."
msgstr ""
"バイグラムでトークナイズする。 ``TokenBigramSplitSymbolAlpha`` に加えて、連続"
"した数字も特別扱いせずに通常のバイグラムの処理を行う。つまり、すべての字種を"
"特別扱いせずにバイグラムの処理を行う。"

msgid ""
"When you use ``TokenBigramSplitSymbolAlphaDigit`` instead of "
"``TokenBigram``, ``\"567\"`` can match ``\"090-0123-4567\"``. But when you "
"use ``TokenBigram``, only ``\"4567\"`` can match as well."
msgstr ""
"``TokenBigram`` ではなく ``TokenBigramSplitSymbolAlphaDigit`` を利用すると"
"「 ``090-0123-4567`` 」に「 ``567`` 」でマッチする。 ``TokenBigram`` の場合は"
"「 ``4567`` 」でないとマッチしない。"

msgid "``TokenBigramIgnoreBlank``"
msgstr ""

msgid "It tokenise in bigram. Unlike ``TokenBigram``, it ignores white spaces."
msgstr ""
"バイグラムでトークナイズする。 ``TokenBigram`` と異なり、空白を無視して処理す"
"る。"

msgid ""
"When you use ``TokenBigramIgnoreBlank`` instead of ``TokenBigram``, ``\"みな"
"さん\"`` can match ``\"み な さ ん 注 目\"``. But when you use "
"``TokenBigram``, only ``\"み な さ ん\"`` can match as well."
msgstr ""
"``TokenBigram`` ではなく ``TokenBigramIgnoreBlank`` を利用すると「 ``み な "
"さ ん 注 目`` 」に「 ``みなさん`` 」でマッチする。 ``TokenBigram`` の場合は"
"「 ``み な さ ん`` 」でないとマッチしない。"

msgid "``TokenBigramIgnoreBlankSplitSymbol``"
msgstr ""

msgid ""
"It tokenise in bigram. Unlike ``TokenBigramSplitSymbol``, it ignores white "
"spaces."
msgstr ""
"バイグラムでトークナイズする。 ``TokenBigramSplitSymbol`` と異なり、空白を無"
"視して処理する。"

msgid ""
"When you use ``TokenBigramIgnoreBlankSplitSymbol`` instead of "
"``TokenBigramSplitSymbol``, ``\"???\"`` can match ``\"! ? ???\"``. But when "
"you use ``TokenBigramSplitSymbol``, only ``\"? ??\"`` can match as well."
msgstr ""
"``TokenBigramSplitSymbol`` ではなく ``TokenBigramIgnoreBlankSplitSymbol`` を"
"利用すると「 ``! !? ??`` 」に「 ``???`` 」でマッチする。 "
"``TokenBigramSplitSymbol`` の場合は「 ``? ??`` 」でないとマッチしない。"

msgid "``TokenBigramIgnoreBlankSplitSymbolAlpha``"
msgstr ""

msgid ""
"It tokenise in bigram. Unlike ``TokenBigramSplitSymbolAlpha``, it ignores "
"white spaces."
msgstr ""
"バイグラムでトークナイズする。 ``TokenBigramSplitSymbolAlpha`` と異なり、空白"
"を無視して処理する。"

msgid ""
"When you use ``TokenBigramIgnoreBlankSplitSymbolAlpha`` instead of "
"``TokenBigramSplitSymbolAlpha``, ``\"ama\"`` can match ``\"I am a pen.\"``. "
"But when you use ``TokenBigramSplitSymbolAlpha``, only ``\"am a\"`` can "
"match as well."
msgstr ""
"``TokenBigramSplitSymbolAlpha`` ではなく "
"``TokenBigramIgnoreBlankSplitSymbolAlpha`` を利用すると「 ``I am a pen.`` 」"
"に「 ``ama`` 」でマッチする。 ``TokenBigramSplitSymbolAlpha`` の場合は"
"「 ``am a`` 」でないとマッチしない。"

msgid "``TokenBigramIgnoreBlankSplitSymbolAlphaDigit``"
msgstr ""

msgid ""
"It tokenise in bigram. Unlike ``TokenBigramSplitSymbolAlphaDigit``, it "
"ignores white spaces."
msgstr ""
"バイグラムでトークナイズする。 ``TokenBigramSplitSymbolAlphaDigit`` と異な"
"り、空白を無視して処理する。"

msgid ""
"When you use ``TokenBigramIgnoreBlankSplitSymbolAlphaDigit`` instead of "
"``TokenBigramSplitSymbolAlphaDigit``, ``\"9001\"`` can match ``\"090 0123 "
"4567\"``. But when you use ``TokenBigramSplitSymbolAlphaDigit``, only ``\"90 "
"01\"`` can match as well."
msgstr ""
"``TokenBigramSplitSymbolAlphaDigit`` ではなく "
"``TokenBigramIgnoreBlankSplitSymbolAlphaDigit`` を利用すると「 ``090 0123 "
"4567`` 」に「 ``9001`` 」でマッチする。 ``TokenBigramSplitSymbolAlphaDigit`` "
"の場合は「 ``90 01`` 」でないとマッチしない。"

msgid "``TokenDelimit``"
msgstr ""

msgid "It tokenise by splitting with a white space."
msgstr "空白区切りでトークナイズする。"

msgid ""
"``\"movie horror topic\"`` will be tokenised as ``\"movie\"``, ``\"horror"
"\"``, ``\"topic\"``."
msgstr ""
"「 ``movie horror topic`` 」をトークナイズすると「 ``movie`` 」、"
"「 ``horror`` 」、「 ``topic`` 」になります。"

msgid "``TokenDelimitNull``"
msgstr ""

msgid "It tokenise by splitting with a null character (``\\\\0``)."
msgstr "null文字（ ``\\\\0`` ）区切りでトークナイズする。"

msgid ""
"``\"movie\\\\0horror\\\\0topic\"`` will be tokenised as ``\"movie\"``, ``"
"\"horror\"``, ``\"topic\"``."
msgstr ""
"「 ``movie\\\\0horror\\\\0topic`` 」をトークナイズすると「 ``movie`` 」、"
"「 ``horror`` 」、「 ``topic`` 」になります。"

msgid "``TokenUnigram``"
msgstr ""

msgid ""
"It tokenises in unigram. But continuous alphabets, numbers or symbols are "
"treated as a token. So there can exist tokes with 2 letters or more. It is "
"to reduce noises."
msgstr ""
"ユニグラムでトークナイズする。ただし、連続したアルファベット・連続した数字・"
"連続した記号はそれぞれ1つのトークンとして扱う。そのため、2文字以上のトークン"
"も存在する。これはノイズを減らすためである。"

msgid "``TokenTrigram``"
msgstr ""

msgid ""
"It tokenises in trigram. But continuous alphabets, numbers or symbols are "
"treated as a token. So there can exist tokes with 4 letters or more. It is "
"to reduce noises."
msgstr ""
"トリグラムでトークナイズする。ただし、連続したアルファベット・連続した数字・"
"連続した記号はそれぞれ1つのトークンとして扱う。そのため、4文字以上のトークン"
"も存在する。これはノイズを減らすためである。"
